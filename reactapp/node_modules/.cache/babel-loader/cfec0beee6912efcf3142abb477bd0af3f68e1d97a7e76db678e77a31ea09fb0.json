{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KEERTHI VASAN\\\\Desktop\\\\Advanced-To-Do-App-with-calender-and-remainders\\\\reactapp\\\\src\\\\context\\\\ReminderContext.jsx\",\n  _s = $RefreshSig$();\n// import React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// const ReminderContext = createContext();\n\n// export const ReminderProvider = ({ children }) => {\n//   // const [reminders, setReminders] = useState(() => {\n\n//   //   const stored = localStorage.getItem(\"reminders\");\n//   //   return stored ? JSON.parse(stored) : [];\n//   // });\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(\"reminders\", JSON.stringify(reminders));\n//   // }, [reminders]);\n\n//   const addReminder = (taskId, reminder) => {\n//     const newReminder = {\n//       id: Date.now(), \n//       taskId,\n//       ...reminder,\n//     };\n//     setReminders((prev) => [...prev, newReminder]);\n//   };\n\n//   const updateReminder = (id, updated) => {\n//     setReminders((prev) =>\n//       prev.map((r) => (r.id === id ? { ...r, ...updated } : r))\n//     );\n//   };\n\n//   const deleteReminder = (id) => {\n//     setReminders((prev) => prev.filter((r) => r.id !== id));\n//   };\n\n//   const getRemindersByTask = (taskId) => {\n//     return reminders.filter((r) => r.taskId === taskId);\n//   };\n\n//   return (\n//     <ReminderContext.Provider\n//       value={{ reminders, addReminder, updateReminder, deleteReminder, getRemindersByTask }}\n//     >\n//       {children}\n//     </ReminderContext.Provider>\n//   );\n// };\n\n// export const useReminder = () => useContext(ReminderContext);\n\nimport React, { createContext, useContext } from \"react\";\nimport * as api from \"../api\"; // make sure your API functions are imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReminderContext = /*#__PURE__*/createContext();\nexport const ReminderProvider = ({\n  children\n}) => {\n  // No local reminders state needed\n\n  const addReminder = async (taskId, reminder) => {\n    const res = await api.addReminder(taskId, reminder);\n    return res.data; // return newly created reminder\n  };\n  const getRemindersByTask = async taskId => {\n    const res = await api.getReminders(taskId);\n    return res.data; // returns array of reminders\n  };\n  const updateReminder = async (id, reminder) => {\n    const res = await api.updateReminder(id, reminder);\n    return res.data;\n  };\n  const deleteReminder = async id => {\n    await api.deleteReminder(id);\n  };\n  return /*#__PURE__*/_jsxDEV(ReminderContext.Provider, {\n    value: {\n      addReminder,\n      getRemindersByTask,\n      updateReminder,\n      deleteReminder\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_c = ReminderProvider;\nexport const useReminder = () => {\n  _s();\n  return useContext(ReminderContext);\n};\n_s(useReminder, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ReminderProvider\");","map":{"version":3,"names":["React","createContext","useContext","api","jsxDEV","_jsxDEV","ReminderContext","ReminderProvider","children","addReminder","taskId","reminder","res","data","getRemindersByTask","getReminders","updateReminder","id","deleteReminder","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useReminder","_s","$RefreshReg$"],"sources":["C:/Users/KEERTHI VASAN/Desktop/Advanced-To-Do-App-with-calender-and-remainders/reactapp/src/context/ReminderContext.jsx"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// const ReminderContext = createContext();\r\n\r\n// export const ReminderProvider = ({ children }) => {\r\n//   // const [reminders, setReminders] = useState(() => {\r\n    \r\n//   //   const stored = localStorage.getItem(\"reminders\");\r\n//   //   return stored ? JSON.parse(stored) : [];\r\n//   // });\r\n\r\n\r\n//   // useEffect(() => {\r\n//   //   localStorage.setItem(\"reminders\", JSON.stringify(reminders));\r\n//   // }, [reminders]);\r\n\r\n//   const addReminder = (taskId, reminder) => {\r\n//     const newReminder = {\r\n//       id: Date.now(), \r\n//       taskId,\r\n//       ...reminder,\r\n//     };\r\n//     setReminders((prev) => [...prev, newReminder]);\r\n//   };\r\n\r\n//   const updateReminder = (id, updated) => {\r\n//     setReminders((prev) =>\r\n//       prev.map((r) => (r.id === id ? { ...r, ...updated } : r))\r\n//     );\r\n//   };\r\n\r\n//   const deleteReminder = (id) => {\r\n//     setReminders((prev) => prev.filter((r) => r.id !== id));\r\n//   };\r\n\r\n//   const getRemindersByTask = (taskId) => {\r\n//     return reminders.filter((r) => r.taskId === taskId);\r\n//   };\r\n\r\n//   return (\r\n//     <ReminderContext.Provider\r\n//       value={{ reminders, addReminder, updateReminder, deleteReminder, getRemindersByTask }}\r\n//     >\r\n//       {children}\r\n//     </ReminderContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useReminder = () => useContext(ReminderContext);\r\n\r\nimport React, { createContext, useContext } from \"react\";\r\nimport * as api from \"../api\"; // make sure your API functions are imported\r\n\r\nconst ReminderContext = createContext();\r\n\r\nexport const ReminderProvider = ({ children }) => {\r\n  // No local reminders state needed\r\n\r\n  const addReminder = async (taskId, reminder) => {\r\n    const res = await api.addReminder(taskId, reminder);\r\n    return res.data; // return newly created reminder\r\n  };\r\n\r\n  const getRemindersByTask = async (taskId) => {\r\n    const res = await api.getReminders(taskId);\r\n    return res.data; // returns array of reminders\r\n  };\r\n\r\n  const updateReminder = async (id, reminder) => {\r\n    const res = await api.updateReminder(id, reminder);\r\n    return res.data;\r\n  };\r\n\r\n  const deleteReminder = async (id) => {\r\n    await api.deleteReminder(id);\r\n  };\r\n\r\n  return (\r\n    <ReminderContext.Provider\r\n      value={{ addReminder, getRemindersByTask, updateReminder, deleteReminder }}\r\n    >\r\n      {children}\r\n    </ReminderContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useReminder = () => useContext(ReminderContext);\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,OAAO,KAAKC,GAAG,MAAM,QAAQ,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,eAAe,gBAAGL,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMM,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAChD;;EAEA,MAAMC,WAAW,GAAG,MAAAA,CAAOC,MAAM,EAAEC,QAAQ,KAAK;IAC9C,MAAMC,GAAG,GAAG,MAAMT,GAAG,CAACM,WAAW,CAACC,MAAM,EAAEC,QAAQ,CAAC;IACnD,OAAOC,GAAG,CAACC,IAAI,CAAC,CAAC;EACnB,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAOJ,MAAM,IAAK;IAC3C,MAAME,GAAG,GAAG,MAAMT,GAAG,CAACY,YAAY,CAACL,MAAM,CAAC;IAC1C,OAAOE,GAAG,CAACC,IAAI,CAAC,CAAC;EACnB,CAAC;EAED,MAAMG,cAAc,GAAG,MAAAA,CAAOC,EAAE,EAAEN,QAAQ,KAAK;IAC7C,MAAMC,GAAG,GAAG,MAAMT,GAAG,CAACa,cAAc,CAACC,EAAE,EAAEN,QAAQ,CAAC;IAClD,OAAOC,GAAG,CAACC,IAAI;EACjB,CAAC;EAED,MAAMK,cAAc,GAAG,MAAOD,EAAE,IAAK;IACnC,MAAMd,GAAG,CAACe,cAAc,CAACD,EAAE,CAAC;EAC9B,CAAC;EAED,oBACEZ,OAAA,CAACC,eAAe,CAACa,QAAQ;IACvBC,KAAK,EAAE;MAAEX,WAAW;MAAEK,kBAAkB;MAAEE,cAAc;MAAEE;IAAe,CAAE;IAAAV,QAAA,EAE1EA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACC,EAAA,GA7BWlB,gBAAgB;AA+B7B,OAAO,MAAMmB,WAAW,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMzB,UAAU,CAACI,eAAe,CAAC;AAAA;AAACqB,EAAA,CAAhDD,WAAW;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}