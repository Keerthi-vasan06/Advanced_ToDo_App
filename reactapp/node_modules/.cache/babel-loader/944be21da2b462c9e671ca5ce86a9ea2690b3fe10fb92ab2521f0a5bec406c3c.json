{"ast":null,"code":"// import React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// const ReminderContext = createContext();\n\n// export const ReminderProvider = ({ children }) => {\n//   // const [reminders, setReminders] = useState(() => {\n\n//   //   const stored = localStorage.getItem(\"reminders\");\n//   //   return stored ? JSON.parse(stored) : [];\n//   // });\n\n//   // useEffect(() => {\n//   //   localStorage.setItem(\"reminders\", JSON.stringify(reminders));\n//   // }, [reminders]);\n\n//   const addReminder = (taskId, reminder) => {\n//     const newReminder = {\n//       id: Date.now(), \n//       taskId,\n//       ...reminder,\n//     };\n//     setReminders((prev) => [...prev, newReminder]);\n//   };\n\n//   const updateReminder = (id, updated) => {\n//     setReminders((prev) =>\n//       prev.map((r) => (r.id === id ? { ...r, ...updated } : r))\n//     );\n//   };\n\n//   const deleteReminder = (id) => {\n//     setReminders((prev) => prev.filter((r) => r.id !== id));\n//   };\n\n//   const getRemindersByTask = (taskId) => {\n//     return reminders.filter((r) => r.taskId === taskId);\n//   };\n\n//   return (\n//     <ReminderContext.Provider\n//       value={{ reminders, addReminder, updateReminder, deleteReminder, getRemindersByTask }}\n//     >\n//       {children}\n//     </ReminderContext.Provider>\n//   );\n// };\n\n// export const useReminder = () => useContext(ReminderContext);","map":{"version":3,"names":[],"sources":["C:/Users/KEERTHI VASAN/Desktop/Advanced-To-Do-App-with-calender-and-remainders/reactapp/src/context/ReminderContext.jsx"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// const ReminderContext = createContext();\r\n\r\n// export const ReminderProvider = ({ children }) => {\r\n//   // const [reminders, setReminders] = useState(() => {\r\n    \r\n//   //   const stored = localStorage.getItem(\"reminders\");\r\n//   //   return stored ? JSON.parse(stored) : [];\r\n//   // });\r\n\r\n\r\n//   // useEffect(() => {\r\n//   //   localStorage.setItem(\"reminders\", JSON.stringify(reminders));\r\n//   // }, [reminders]);\r\n\r\n//   const addReminder = (taskId, reminder) => {\r\n//     const newReminder = {\r\n//       id: Date.now(), \r\n//       taskId,\r\n//       ...reminder,\r\n//     };\r\n//     setReminders((prev) => [...prev, newReminder]);\r\n//   };\r\n\r\n//   const updateReminder = (id, updated) => {\r\n//     setReminders((prev) =>\r\n//       prev.map((r) => (r.id === id ? { ...r, ...updated } : r))\r\n//     );\r\n//   };\r\n\r\n//   const deleteReminder = (id) => {\r\n//     setReminders((prev) => prev.filter((r) => r.id !== id));\r\n//   };\r\n\r\n//   const getRemindersByTask = (taskId) => {\r\n//     return reminders.filter((r) => r.taskId === taskId);\r\n//   };\r\n\r\n//   return (\r\n//     <ReminderContext.Provider\r\n//       value={{ reminders, addReminder, updateReminder, deleteReminder, getRemindersByTask }}\r\n//     >\r\n//       {children}\r\n//     </ReminderContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useReminder = () => useContext(ReminderContext);\r\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}