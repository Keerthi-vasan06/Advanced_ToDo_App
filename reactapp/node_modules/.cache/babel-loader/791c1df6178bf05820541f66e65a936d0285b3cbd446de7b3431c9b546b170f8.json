{"ast":null,"code":"// import React, { useEffect, useState, useMemo } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import Sidebar from \"../components/Sidebar\";\n// import TaskForm from \"../components/TaskForm\";\n// import { useAuth } from \"../context/AuthContext.jsx\";\n// import { getTasks, addTask, deleteTask, updateTask } from \"../api\";\n// import { getReminders, addReminder as apiAddReminder, updateReminder as apiUpdateReminder, deleteReminder as apiDeleteReminder } from \"../api\";\n\n// export default function DashboardUser() {\n//   const { user, logout } = useAuth();\n//   const userId = user?.id;\n//   const navigate = useNavigate();\n\n//   const [tasks, setTasks] = useState([]);\n//   const [reminders, setReminders] = useState([]);\n\n//   const [editingTaskId, setEditingTaskId] = useState(null);\n//   const [editTitle, setEditTitle] = useState(\"\");\n//   const [editDesc, setEditDesc] = useState(\"\");\n//   const [editDeadline, setEditDeadline] = useState(\"\");\n//   const [editPriority, setEditPriority] = useState(\"\");\n//   const [editStatus, setEditStatus] = useState(\"\");\n\n//   const [editingReminderId, setEditingReminderId] = useState(null);\n//   const [editReminderTitle, setEditReminderTitle] = useState(\"\");\n//   const [editReminderDate, setEditReminderDate] = useState(\"\");\n//   const [editReminderTaskId, setEditReminderTaskId] = useState(\"\");\n\n//   const [newReminderTitle, setNewReminderTitle] = useState(\"\");\n//   const [newReminderDate, setNewReminderDate] = useState(\"\");\n//   const [newReminderTaskId, setNewReminderTaskId] = useState(\"\");\n\n//   const [filterDate, setFilterDate] = useState(\"\");\n//   const [filterPriority, setFilterPriority] = useState(\"\");\n//   const [filterStatus, setFilterStatus] = useState(\"\");\n\n//   useEffect(() => {\n//     if (!userId) return;\n\n//     const fetchTasks = async () => {\n//       try {\n//         const response = await getTasks(userId);\n//         const fetchedTasks = Array.isArray(response.data) ? response.data : [];\n//         setTasks(fetchedTasks);\n//       } catch (error) {\n//         console.error(\"Error fetching tasks:\", error);\n//         setTasks([]);\n//       }\n//     };\n\n//     fetchTasks();\n//   }, [userId]);\n\n//   const handleTaskAdded = async (newTask) => {\n//     try {\n//       await addTask(userId, newTask);\n//       const response = await getTasks(userId);\n//       setTasks(Array.isArray(response.data) ? response.data : []);\n//     } catch (error) {\n//       console.error(\"Error adding task:\", error);\n//     }\n//   };\n\n//   const handleDeleteTask = async (taskId) => {\n//     if (!window.confirm(\"Are you sure you want to delete this task?\")) return;\n//     try {\n//       await deleteTask(userId, taskId);\n//       setTasks(tasks.filter((t) => t.id !== taskId));\n//       setReminders(reminders.filter((r) => r.taskId !== taskId)); // remove related reminders\n//     } catch (error) {\n//       console.error(\"Error deleting task:\", error);\n//       alert(\"Failed to delete task\");\n//     }\n//   };\n\n//   const startEditTask = (task) => {\n//     setEditingTaskId(task.id);\n//     setEditTitle(task.title);\n//     setEditDesc(task.description);\n//     setEditDeadline(task.deadline_date);\n//     setEditPriority(task.priority);\n//     setEditStatus(task.status);\n//   };\n\n//   const saveEditTask = async (taskId) => {\n//     try {\n//       await updateTask(userId, taskId, {\n//         title: editTitle,\n//         description: editDesc,\n//         deadline_date: editDeadline,\n//         priority: editPriority,\n//         status: editStatus,\n//       });\n//       setTasks(tasks.map((t) =>\n//         t.id === taskId\n//           ? { ...t, title: editTitle, description: editDesc, deadline_date: editDeadline, priority: editPriority, status: editStatus }\n//           : t\n//       ));\n//       setEditingTaskId(null);\n//     } catch (error) {\n//       console.error(\"Error updating task:\", error);\n//       alert(\"Failed to update task\");\n//     }\n//   };\n\n//   const handleAddReminder = (e) => {\n//     e.preventDefault();\n//     if (!newReminderTitle.trim() || !newReminderDate || !newReminderTaskId) {\n//       alert(\"Please enter title, date, and select a task.\");\n//       return;\n//     }\n\n//     const newReminder = {\n//       id: Date.now(), \n//       title: newReminderTitle.trim(),\n//       date: newReminderDate,\n//       taskId: Number(newReminderTaskId),\n//     };\n\n//     setReminders([...reminders, newReminder]);\n//     setNewReminderTitle(\"\");\n//     setNewReminderDate(\"\");\n//     setNewReminderTaskId(\"\");\n//   };\n\n//   const handleDeleteReminder = (reminderId) => {\n//     if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\n//     setReminders(reminders.filter((r) => r.id !== reminderId));\n//   };\n\n//   const startEditReminder = (reminder) => {\n//     setEditingReminderId(reminder.id);\n//     setEditReminderTitle(reminder.title);\n//     setEditReminderDate(reminder.date);\n//     setEditReminderTaskId(reminder.taskId);\n//   };\n\n//   const saveEditReminder = (reminderId) => {\n//     if (!editReminderTitle.trim() || !editReminderDate || !editReminderTaskId) {\n//       alert(\"Please enter title, date, and select a task.\");\n//       return;\n//     }\n\n//     setReminders(reminders.map((r) =>\n//       r.id === reminderId\n//         ? { ...r, title: editReminderTitle, date: editReminderDate, taskId: Number(editReminderTaskId) }\n//         : r\n//     ));\n//     setEditingReminderId(null);\n//   };\n\n//   const stats = useMemo(() => {\n//     const total = tasks.length;\n//     const pending = tasks.filter((t) => t.status === \"PENDING\").length;\n//     const complete = tasks.filter((t) => t.status === \"COMPLETE\").length;\n//     const overdue = tasks.filter((t) => t.deadline_date && t.status !== \"COMPLETE\" && new Date(t.deadline_date) < new Date()).length;\n//     return { total, pending, complete, overdue };\n//   }, [tasks]);\n\n//   const filteredTasks = tasks.filter((t) => {\n//     const matchDate = filterDate ? t.deadline_date === filterDate : true;\n//     const matchPriority = filterPriority ? t.priority === filterPriority : true;\n//     const matchStatus = filterStatus ? t.status === filterStatus : true;\n//     return matchDate && matchPriority && matchStatus;\n//   });\n\n//   return (\n//     <div style={{ display: \"flex\", minHeight: \"100vh\" }}>\n//       <Sidebar />\n//       <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\" }}>\n//         {/* Header */}\n//         <div style={{ width: \"100%\", padding: \"1rem 1rem\", backgroundColor: \"#3D5AFE\", color: \"#fff\", fontSize: \"1.2rem\", fontWeight: \"bold\", boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\", position: \"sticky\", top: 0, zIndex: 1000, display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n//           <span>User Dashboard</span>\n//           <button \n//       onClick={() => { logout(); navigate(\"/login\"); }} \n//       style={{ \n//         backgroundColor: \"#ff4d4d\", \n//         color: \"#fff\", \n//         border: \"none\", \n//         padding: \"0.5rem 1rem\", \n//         borderRadius: \"8px\", \n//         cursor: \"pointer\", \n//         fontWeight: \"500\", \n//         boxShadow: \"0 2px 6px rgba(0,0,0,0.15)\" \n//       }}\n//     >\n//       Logout\n//     </button>\n//         </div>\n\n//         <main style={{ flex: 1, padding: \"2rem\", backgroundColor: \"#f5f7ff\", minHeight: \"100vh\" }}>\n//           <h2 style={{ color: \"#3D5AFE\", marginBottom: \"1.5rem\" }}>Hello, {user?.name}</h2>\n\n//           {/* Stats */}\n//           <div style={{ display: \"flex\", gap: \"1.5rem\", marginBottom: \"2rem\", flexWrap: \"wrap\" }}>\n//             {[{ label: \"Total Tasks\", value: stats.total }, { label: \"Pending\", value: stats.pending }, { label: \"Completed\", value: stats.complete }, { label: \"Overdue\", value: stats.overdue }].map((s, idx) => (\n//               <div key={idx} style={{ backgroundColor: \"#fff\", padding: \"1.5rem\", borderRadius: \"10px\", flex: \"1 1 200px\", boxShadow: \"0 4px 15px rgba(0,0,0,0.1)\", textAlign: \"center\", transition: \"transform 0.2s\" }}>\n//                 <div style={{ fontSize: \"2rem\", fontWeight: \"bold\", color: \"#3D5AFE\" }}>{s.value}</div>\n//                 <div style={{ color: \"#666\", marginTop: \"0.5rem\" }}>{s.label}</div>\n//               </div>\n//             ))}\n//           </div>\n\n//           {/* Filter Section */}\n//           <div style={{ backgroundColor: \"#fff\", padding: \"1rem\", borderRadius: \"10px\", marginBottom: \"1.5rem\", display: \"flex\", gap: \"1rem\", flexWrap: \"wrap\", alignItems: \"center\" }}>\n//             <input type=\"date\" value={filterDate} onChange={(e) => setFilterDate(e.target.value)} style={{ padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }} />\n//             <select value={filterPriority} onChange={(e) => setFilterPriority(e.target.value)} style={{ padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }}>\n//               <option value=\"\">All Priorities</option>\n//               <option value=\"LOW\">LOW</option>\n//               <option value=\"MEDIUM\">MEDIUM</option>\n//               <option value=\"HIGH\">HIGH</option>\n//             </select>\n//             <select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} style={{ padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }}>\n//               <option value=\"\">All Status</option>\n//               <option value=\"PENDING\">PENDING</option>\n//               <option value=\"COMPLETE\">COMPLETE</option>\n//               <option value=\"INCOMPLETE\">INCOMPLETE</option>\n//             </select>\n//             <button onClick={() => { setFilterDate(\"\"); setFilterPriority(\"\"); setFilterStatus(\"\"); }} style={{ backgroundColor: \"#FFA500\", color: \"#fff\", border: \"none\", padding: \"0.5rem 1rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Clear Filters</button>\n//           </div>\n\n//           {/* Tasks Section */}\n//           <div style={{ backgroundColor: \"#fff\", padding: \"1.5rem\", borderRadius: \"10px\", boxShadow: \"0 4px 15px rgba(0,0,0,0.1)\", marginBottom: \"2rem\" }}>\n//             <h3 style={{ color: \"#3D5AFE\", marginBottom: \"1rem\" }}>Your Tasks</h3>\n//             <div style={{ marginBottom: \"1.5rem\" }}>\n//               <TaskForm userId={userId} onTaskAdded={handleTaskAdded} />\n//             </div>\n//             <table border=\"0\" cellPadding=\"8\" style={{ width: \"100%\", borderCollapse: \"collapse\", textAlign: \"center\", minWidth: \"600px\" }}>\n//               <thead style={{ backgroundColor: \"#3D5AFE\", color: \"#fff\" }}>\n//                 <tr>\n//                   <th>Title</th>\n//                   <th>Description</th>\n//                   <th>Deadline</th>\n//                   <th>Priority</th>\n//                   <th>Status</th>\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {filteredTasks.length === 0 && <tr><td colSpan=\"6\" style={{ textAlign: \"center\", padding: \"1rem\" }}>No tasks found</td></tr>}\n//                 {filteredTasks.map((task) => (\n//                   <tr key={task.id} style={{ borderBottom: \"1px solid #eee\" }}>\n//                     <td>{editingTaskId === task.id ? <input value={editTitle} onChange={(e) => setEditTitle(e.target.value)} /> : task.title}</td>\n//                     <td>{editingTaskId === task.id ? <input value={editDesc} onChange={(e) => setEditDesc(e.target.value)} /> : task.description}</td>\n//                     <td>{editingTaskId === task.id ? <input type=\"date\" value={editDeadline} onChange={(e) => setEditDeadline(e.target.value)} /> : task.deadline_date}</td>\n//                     <td>{editingTaskId === task.id ? <select value={editPriority} onChange={(e) => setEditPriority(e.target.value)}><option>LOW</option><option>MEDIUM</option><option>HIGH</option></select> : task.priority}</td>\n//                     <td>{editingTaskId === task.id ? <select value={editStatus} onChange={(e) => setEditStatus(e.target.value)}><option>PENDING</option><option>COMPLETE</option><option>INCOMPLETE</option></select> : task.status}</td>\n//                     <td>\n//                       {editingTaskId === task.id ? (\n//                         <>\n//                           <button onClick={() => saveEditTask(task.id)} style={{ backgroundColor: \"#4CAF50\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\", marginRight: \"0.3rem\" }}>Save</button>\n//                           <button onClick={() => setEditingTaskId(null)} style={{ backgroundColor: \"#aaa\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Cancel</button>\n//                         </>\n//                       ) : (\n//                         <>\n//                           <button onClick={() => startEditTask(task)} style={{ backgroundColor: \"#FFA500\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\", marginRight: \"0.3rem\" }}>Edit</button>\n//                           <button onClick={() => handleDeleteTask(task.id)} style={{ backgroundColor: \"#ff4d4d\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Delete</button>\n//                         </>\n//                       )}\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </div>\n\n//           {/* Reminders Section */}\n//           <div style={{ backgroundColor: \"#fff\", padding: \"1.5rem\", borderRadius: \"10px\", boxShadow: \"0 4px 15px rgba(0,0,0,0.1)\" }}>\n//             <h3 style={{ color: \"#3D5AFE\", marginBottom: \"1rem\" }}>Your Reminders</h3>\n\n//             {/* Inline Add Reminder Form */}\n//             <form onSubmit={handleAddReminder} style={{ display: \"flex\", gap: \"0.5rem\", marginBottom: \"1rem\" }}>\n//               <input type=\"text\" placeholder=\"Reminder title\" value={newReminderTitle} onChange={(e) => setNewReminderTitle(e.target.value)} style={{ flex: 1, padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }} required />\n//               <input type=\"date\" value={newReminderDate} onChange={(e) => setNewReminderDate(e.target.value)} style={{ padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }} required />\n//               <select value={newReminderTaskId} onChange={(e) => setNewReminderTaskId(e.target.value)} style={{ padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }} required>\n//                 <option value=\"\">Select Task</option>\n//                 {tasks.map((task) => <option key={task.id} value={task.id}>{task.title}</option>)}\n//               </select>\n//               <button type=\"submit\" style={{ backgroundColor: \"#4CAF50\", color: \"#fff\", border: \"none\", padding: \"0.5rem 1rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Add</button>\n//             </form>\n\n//             <table border=\"0\" cellPadding=\"8\" style={{ width: \"100%\", borderCollapse: \"collapse\", textAlign: \"center\", minWidth: \"400px\" }}>\n//               <thead style={{ backgroundColor: \"#3D5AFE\", color: \"#fff\" }}>\n//                 <tr>\n//                   <th>Title</th>\n//                   <th>Date</th>\n//                   <th>Task</th>\n//                   <th>Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {reminders.length === 0 && <tr><td colSpan=\"4\" style={{ textAlign: \"center\", padding: \"1rem\" }}>No reminders found</td></tr>}\n//                 {reminders.map((reminder) => {\n//                   const taskName = tasks.find(t => t.id === reminder.taskId)?.title || \"Unknown\";\n//                   return (\n//                     <tr key={reminder.id} style={{ borderBottom: \"1px solid #eee\" }}>\n//                       <td>{editingReminderId === reminder.id ? <input value={editReminderTitle} onChange={(e) => setEditReminderTitle(e.target.value)} /> : reminder.title}</td>\n//                       <td>{editingReminderId === reminder.id ? <input type=\"date\" value={editReminderDate} onChange={(e) => setEditReminderDate(e.target.value)} /> : reminder.date}</td>\n//                       <td>{editingReminderId === reminder.id ? (\n//                         <select value={editReminderTaskId} onChange={(e) => setEditReminderTaskId(e.target.value)}>\n//                           <option value=\"\">Select Task</option>\n//                           {tasks.map((task) => <option key={task.id} value={task.id}>{task.title}</option>)}\n//                         </select>\n//                       ) : taskName}</td>\n//                       <td>\n//                         {editingReminderId === reminder.id ? (\n//                           <>\n//                             <button onClick={() => saveEditReminder(reminder.id)} style={{ backgroundColor: \"#4CAF50\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\", marginRight: \"0.3rem\" }}>Save</button>\n//                             <button onClick={() => setEditingReminderId(null)} style={{ backgroundColor: \"#aaa\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Cancel</button>\n//                           </>\n//                         ) : (\n//                           <>\n//                             <button onClick={() => startEditReminder(reminder)} style={{ backgroundColor: \"#FFA500\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\", marginRight: \"0.3rem\" }}>Edit</button>\n//                             <button onClick={() => handleDeleteReminder(reminder.id)} style={{ backgroundColor: \"#ff4d4d\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Delete</button>\n//                           </>\n//                         )}\n//                       </td>\n//                     </tr>\n//                   );\n//                 })}\n//               </tbody>\n//             </table>\n//           </div>\n//         </main>\n\n//         {/* Footer */}\n//         <div style={{ marginTop: \"auto\", textAlign: \"center\", padding: \"1rem\", backgroundColor: \"#3D5AFE\", color: \"#fff\", borderRadius: \"10px\" }}>\n//           © {new Date().getFullYear()} Tasky | Built with ❤️\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/KEERTHI VASAN/Desktop/Advanced-To-Do-App-with-calender-and-remainders/reactapp/src/pages/DashboardUser.jsx"],"sourcesContent":["// import React, { useEffect, useState, useMemo } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import Sidebar from \"../components/Sidebar\";\r\n// import TaskForm from \"../components/TaskForm\";\r\n// import { useAuth } from \"../context/AuthContext.jsx\";\r\n// import { getTasks, addTask, deleteTask, updateTask } from \"../api\";\r\n// import { getReminders, addReminder as apiAddReminder, updateReminder as apiUpdateReminder, deleteReminder as apiDeleteReminder } from \"../api\";\r\n\r\n\r\n// export default function DashboardUser() {\r\n//   const { user, logout } = useAuth();\r\n//   const userId = user?.id;\r\n//   const navigate = useNavigate();\r\n\r\n//   const [tasks, setTasks] = useState([]);\r\n//   const [reminders, setReminders] = useState([]);\r\n\r\n//   const [editingTaskId, setEditingTaskId] = useState(null);\r\n//   const [editTitle, setEditTitle] = useState(\"\");\r\n//   const [editDesc, setEditDesc] = useState(\"\");\r\n//   const [editDeadline, setEditDeadline] = useState(\"\");\r\n//   const [editPriority, setEditPriority] = useState(\"\");\r\n//   const [editStatus, setEditStatus] = useState(\"\");\r\n\r\n//   const [editingReminderId, setEditingReminderId] = useState(null);\r\n//   const [editReminderTitle, setEditReminderTitle] = useState(\"\");\r\n//   const [editReminderDate, setEditReminderDate] = useState(\"\");\r\n//   const [editReminderTaskId, setEditReminderTaskId] = useState(\"\");\r\n\r\n//   const [newReminderTitle, setNewReminderTitle] = useState(\"\");\r\n//   const [newReminderDate, setNewReminderDate] = useState(\"\");\r\n//   const [newReminderTaskId, setNewReminderTaskId] = useState(\"\");\r\n\r\n//   const [filterDate, setFilterDate] = useState(\"\");\r\n//   const [filterPriority, setFilterPriority] = useState(\"\");\r\n//   const [filterStatus, setFilterStatus] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     if (!userId) return;\r\n\r\n//     const fetchTasks = async () => {\r\n//       try {\r\n//         const response = await getTasks(userId);\r\n//         const fetchedTasks = Array.isArray(response.data) ? response.data : [];\r\n//         setTasks(fetchedTasks);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching tasks:\", error);\r\n//         setTasks([]);\r\n//       }\r\n//     };\r\n\r\n//     fetchTasks();\r\n//   }, [userId]);\r\n\r\n//   const handleTaskAdded = async (newTask) => {\r\n//     try {\r\n//       await addTask(userId, newTask);\r\n//       const response = await getTasks(userId);\r\n//       setTasks(Array.isArray(response.data) ? response.data : []);\r\n//     } catch (error) {\r\n//       console.error(\"Error adding task:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleDeleteTask = async (taskId) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this task?\")) return;\r\n//     try {\r\n//       await deleteTask(userId, taskId);\r\n//       setTasks(tasks.filter((t) => t.id !== taskId));\r\n//       setReminders(reminders.filter((r) => r.taskId !== taskId)); // remove related reminders\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting task:\", error);\r\n//       alert(\"Failed to delete task\");\r\n//     }\r\n//   };\r\n\r\n//   const startEditTask = (task) => {\r\n//     setEditingTaskId(task.id);\r\n//     setEditTitle(task.title);\r\n//     setEditDesc(task.description);\r\n//     setEditDeadline(task.deadline_date);\r\n//     setEditPriority(task.priority);\r\n//     setEditStatus(task.status);\r\n//   };\r\n\r\n//   const saveEditTask = async (taskId) => {\r\n//     try {\r\n//       await updateTask(userId, taskId, {\r\n//         title: editTitle,\r\n//         description: editDesc,\r\n//         deadline_date: editDeadline,\r\n//         priority: editPriority,\r\n//         status: editStatus,\r\n//       });\r\n//       setTasks(tasks.map((t) =>\r\n//         t.id === taskId\r\n//           ? { ...t, title: editTitle, description: editDesc, deadline_date: editDeadline, priority: editPriority, status: editStatus }\r\n//           : t\r\n//       ));\r\n//       setEditingTaskId(null);\r\n//     } catch (error) {\r\n//       console.error(\"Error updating task:\", error);\r\n//       alert(\"Failed to update task\");\r\n//     }\r\n//   };\r\n\r\n//   const handleAddReminder = (e) => {\r\n//     e.preventDefault();\r\n//     if (!newReminderTitle.trim() || !newReminderDate || !newReminderTaskId) {\r\n//       alert(\"Please enter title, date, and select a task.\");\r\n//       return;\r\n//     }\r\n\r\n//     const newReminder = {\r\n//       id: Date.now(), \r\n//       title: newReminderTitle.trim(),\r\n//       date: newReminderDate,\r\n//       taskId: Number(newReminderTaskId),\r\n//     };\r\n\r\n//     setReminders([...reminders, newReminder]);\r\n//     setNewReminderTitle(\"\");\r\n//     setNewReminderDate(\"\");\r\n//     setNewReminderTaskId(\"\");\r\n//   };\r\n\r\n//   const handleDeleteReminder = (reminderId) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this reminder?\")) return;\r\n//     setReminders(reminders.filter((r) => r.id !== reminderId));\r\n//   };\r\n\r\n//   const startEditReminder = (reminder) => {\r\n//     setEditingReminderId(reminder.id);\r\n//     setEditReminderTitle(reminder.title);\r\n//     setEditReminderDate(reminder.date);\r\n//     setEditReminderTaskId(reminder.taskId);\r\n//   };\r\n\r\n//   const saveEditReminder = (reminderId) => {\r\n//     if (!editReminderTitle.trim() || !editReminderDate || !editReminderTaskId) {\r\n//       alert(\"Please enter title, date, and select a task.\");\r\n//       return;\r\n//     }\r\n\r\n//     setReminders(reminders.map((r) =>\r\n//       r.id === reminderId\r\n//         ? { ...r, title: editReminderTitle, date: editReminderDate, taskId: Number(editReminderTaskId) }\r\n//         : r\r\n//     ));\r\n//     setEditingReminderId(null);\r\n//   };\r\n\r\n//   const stats = useMemo(() => {\r\n//     const total = tasks.length;\r\n//     const pending = tasks.filter((t) => t.status === \"PENDING\").length;\r\n//     const complete = tasks.filter((t) => t.status === \"COMPLETE\").length;\r\n//     const overdue = tasks.filter((t) => t.deadline_date && t.status !== \"COMPLETE\" && new Date(t.deadline_date) < new Date()).length;\r\n//     return { total, pending, complete, overdue };\r\n//   }, [tasks]);\r\n\r\n//   const filteredTasks = tasks.filter((t) => {\r\n//     const matchDate = filterDate ? t.deadline_date === filterDate : true;\r\n//     const matchPriority = filterPriority ? t.priority === filterPriority : true;\r\n//     const matchStatus = filterStatus ? t.status === filterStatus : true;\r\n//     return matchDate && matchPriority && matchStatus;\r\n//   });\r\n\r\n//   return (\r\n//     <div style={{ display: \"flex\", minHeight: \"100vh\" }}>\r\n//       <Sidebar />\r\n//       <div style={{ flex: 1, display: \"flex\", flexDirection: \"column\" }}>\r\n//         {/* Header */}\r\n//         <div style={{ width: \"100%\", padding: \"1rem 1rem\", backgroundColor: \"#3D5AFE\", color: \"#fff\", fontSize: \"1.2rem\", fontWeight: \"bold\", boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\", position: \"sticky\", top: 0, zIndex: 1000, display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n//           <span>User Dashboard</span>\r\n//           <button \r\n//       onClick={() => { logout(); navigate(\"/login\"); }} \r\n//       style={{ \r\n//         backgroundColor: \"#ff4d4d\", \r\n//         color: \"#fff\", \r\n//         border: \"none\", \r\n//         padding: \"0.5rem 1rem\", \r\n//         borderRadius: \"8px\", \r\n//         cursor: \"pointer\", \r\n//         fontWeight: \"500\", \r\n//         boxShadow: \"0 2px 6px rgba(0,0,0,0.15)\" \r\n//       }}\r\n//     >\r\n//       Logout\r\n//     </button>\r\n//         </div>\r\n\r\n//         <main style={{ flex: 1, padding: \"2rem\", backgroundColor: \"#f5f7ff\", minHeight: \"100vh\" }}>\r\n//           <h2 style={{ color: \"#3D5AFE\", marginBottom: \"1.5rem\" }}>Hello, {user?.name}</h2>\r\n\r\n//           {/* Stats */}\r\n//           <div style={{ display: \"flex\", gap: \"1.5rem\", marginBottom: \"2rem\", flexWrap: \"wrap\" }}>\r\n//             {[{ label: \"Total Tasks\", value: stats.total }, { label: \"Pending\", value: stats.pending }, { label: \"Completed\", value: stats.complete }, { label: \"Overdue\", value: stats.overdue }].map((s, idx) => (\r\n//               <div key={idx} style={{ backgroundColor: \"#fff\", padding: \"1.5rem\", borderRadius: \"10px\", flex: \"1 1 200px\", boxShadow: \"0 4px 15px rgba(0,0,0,0.1)\", textAlign: \"center\", transition: \"transform 0.2s\" }}>\r\n//                 <div style={{ fontSize: \"2rem\", fontWeight: \"bold\", color: \"#3D5AFE\" }}>{s.value}</div>\r\n//                 <div style={{ color: \"#666\", marginTop: \"0.5rem\" }}>{s.label}</div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n\r\n//           {/* Filter Section */}\r\n//           <div style={{ backgroundColor: \"#fff\", padding: \"1rem\", borderRadius: \"10px\", marginBottom: \"1.5rem\", display: \"flex\", gap: \"1rem\", flexWrap: \"wrap\", alignItems: \"center\" }}>\r\n//             <input type=\"date\" value={filterDate} onChange={(e) => setFilterDate(e.target.value)} style={{ padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }} />\r\n//             <select value={filterPriority} onChange={(e) => setFilterPriority(e.target.value)} style={{ padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }}>\r\n//               <option value=\"\">All Priorities</option>\r\n//               <option value=\"LOW\">LOW</option>\r\n//               <option value=\"MEDIUM\">MEDIUM</option>\r\n//               <option value=\"HIGH\">HIGH</option>\r\n//             </select>\r\n//             <select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} style={{ padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }}>\r\n//               <option value=\"\">All Status</option>\r\n//               <option value=\"PENDING\">PENDING</option>\r\n//               <option value=\"COMPLETE\">COMPLETE</option>\r\n//               <option value=\"INCOMPLETE\">INCOMPLETE</option>\r\n//             </select>\r\n//             <button onClick={() => { setFilterDate(\"\"); setFilterPriority(\"\"); setFilterStatus(\"\"); }} style={{ backgroundColor: \"#FFA500\", color: \"#fff\", border: \"none\", padding: \"0.5rem 1rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Clear Filters</button>\r\n//           </div>\r\n\r\n//           {/* Tasks Section */}\r\n//           <div style={{ backgroundColor: \"#fff\", padding: \"1.5rem\", borderRadius: \"10px\", boxShadow: \"0 4px 15px rgba(0,0,0,0.1)\", marginBottom: \"2rem\" }}>\r\n//             <h3 style={{ color: \"#3D5AFE\", marginBottom: \"1rem\" }}>Your Tasks</h3>\r\n//             <div style={{ marginBottom: \"1.5rem\" }}>\r\n//               <TaskForm userId={userId} onTaskAdded={handleTaskAdded} />\r\n//             </div>\r\n//             <table border=\"0\" cellPadding=\"8\" style={{ width: \"100%\", borderCollapse: \"collapse\", textAlign: \"center\", minWidth: \"600px\" }}>\r\n//               <thead style={{ backgroundColor: \"#3D5AFE\", color: \"#fff\" }}>\r\n//                 <tr>\r\n//                   <th>Title</th>\r\n//                   <th>Description</th>\r\n//                   <th>Deadline</th>\r\n//                   <th>Priority</th>\r\n//                   <th>Status</th>\r\n//                   <th>Actions</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {filteredTasks.length === 0 && <tr><td colSpan=\"6\" style={{ textAlign: \"center\", padding: \"1rem\" }}>No tasks found</td></tr>}\r\n//                 {filteredTasks.map((task) => (\r\n//                   <tr key={task.id} style={{ borderBottom: \"1px solid #eee\" }}>\r\n//                     <td>{editingTaskId === task.id ? <input value={editTitle} onChange={(e) => setEditTitle(e.target.value)} /> : task.title}</td>\r\n//                     <td>{editingTaskId === task.id ? <input value={editDesc} onChange={(e) => setEditDesc(e.target.value)} /> : task.description}</td>\r\n//                     <td>{editingTaskId === task.id ? <input type=\"date\" value={editDeadline} onChange={(e) => setEditDeadline(e.target.value)} /> : task.deadline_date}</td>\r\n//                     <td>{editingTaskId === task.id ? <select value={editPriority} onChange={(e) => setEditPriority(e.target.value)}><option>LOW</option><option>MEDIUM</option><option>HIGH</option></select> : task.priority}</td>\r\n//                     <td>{editingTaskId === task.id ? <select value={editStatus} onChange={(e) => setEditStatus(e.target.value)}><option>PENDING</option><option>COMPLETE</option><option>INCOMPLETE</option></select> : task.status}</td>\r\n//                     <td>\r\n//                       {editingTaskId === task.id ? (\r\n//                         <>\r\n//                           <button onClick={() => saveEditTask(task.id)} style={{ backgroundColor: \"#4CAF50\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\", marginRight: \"0.3rem\" }}>Save</button>\r\n//                           <button onClick={() => setEditingTaskId(null)} style={{ backgroundColor: \"#aaa\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Cancel</button>\r\n//                         </>\r\n//                       ) : (\r\n//                         <>\r\n//                           <button onClick={() => startEditTask(task)} style={{ backgroundColor: \"#FFA500\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\", marginRight: \"0.3rem\" }}>Edit</button>\r\n//                           <button onClick={() => handleDeleteTask(task.id)} style={{ backgroundColor: \"#ff4d4d\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Delete</button>\r\n//                         </>\r\n//                       )}\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n\r\n//           {/* Reminders Section */}\r\n//           <div style={{ backgroundColor: \"#fff\", padding: \"1.5rem\", borderRadius: \"10px\", boxShadow: \"0 4px 15px rgba(0,0,0,0.1)\" }}>\r\n//             <h3 style={{ color: \"#3D5AFE\", marginBottom: \"1rem\" }}>Your Reminders</h3>\r\n\r\n//             {/* Inline Add Reminder Form */}\r\n//             <form onSubmit={handleAddReminder} style={{ display: \"flex\", gap: \"0.5rem\", marginBottom: \"1rem\" }}>\r\n//               <input type=\"text\" placeholder=\"Reminder title\" value={newReminderTitle} onChange={(e) => setNewReminderTitle(e.target.value)} style={{ flex: 1, padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }} required />\r\n//               <input type=\"date\" value={newReminderDate} onChange={(e) => setNewReminderDate(e.target.value)} style={{ padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }} required />\r\n//               <select value={newReminderTaskId} onChange={(e) => setNewReminderTaskId(e.target.value)} style={{ padding: \"0.5rem\", borderRadius: \"5px\", border: \"1px solid #ccc\" }} required>\r\n//                 <option value=\"\">Select Task</option>\r\n//                 {tasks.map((task) => <option key={task.id} value={task.id}>{task.title}</option>)}\r\n//               </select>\r\n//               <button type=\"submit\" style={{ backgroundColor: \"#4CAF50\", color: \"#fff\", border: \"none\", padding: \"0.5rem 1rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Add</button>\r\n//             </form>\r\n\r\n//             <table border=\"0\" cellPadding=\"8\" style={{ width: \"100%\", borderCollapse: \"collapse\", textAlign: \"center\", minWidth: \"400px\" }}>\r\n//               <thead style={{ backgroundColor: \"#3D5AFE\", color: \"#fff\" }}>\r\n//                 <tr>\r\n//                   <th>Title</th>\r\n//                   <th>Date</th>\r\n//                   <th>Task</th>\r\n//                   <th>Actions</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {reminders.length === 0 && <tr><td colSpan=\"4\" style={{ textAlign: \"center\", padding: \"1rem\" }}>No reminders found</td></tr>}\r\n//                 {reminders.map((reminder) => {\r\n//                   const taskName = tasks.find(t => t.id === reminder.taskId)?.title || \"Unknown\";\r\n//                   return (\r\n//                     <tr key={reminder.id} style={{ borderBottom: \"1px solid #eee\" }}>\r\n//                       <td>{editingReminderId === reminder.id ? <input value={editReminderTitle} onChange={(e) => setEditReminderTitle(e.target.value)} /> : reminder.title}</td>\r\n//                       <td>{editingReminderId === reminder.id ? <input type=\"date\" value={editReminderDate} onChange={(e) => setEditReminderDate(e.target.value)} /> : reminder.date}</td>\r\n//                       <td>{editingReminderId === reminder.id ? (\r\n//                         <select value={editReminderTaskId} onChange={(e) => setEditReminderTaskId(e.target.value)}>\r\n//                           <option value=\"\">Select Task</option>\r\n//                           {tasks.map((task) => <option key={task.id} value={task.id}>{task.title}</option>)}\r\n//                         </select>\r\n//                       ) : taskName}</td>\r\n//                       <td>\r\n//                         {editingReminderId === reminder.id ? (\r\n//                           <>\r\n//                             <button onClick={() => saveEditReminder(reminder.id)} style={{ backgroundColor: \"#4CAF50\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\", marginRight: \"0.3rem\" }}>Save</button>\r\n//                             <button onClick={() => setEditingReminderId(null)} style={{ backgroundColor: \"#aaa\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Cancel</button>\r\n//                           </>\r\n//                         ) : (\r\n//                           <>\r\n//                             <button onClick={() => startEditReminder(reminder)} style={{ backgroundColor: \"#FFA500\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\", marginRight: \"0.3rem\" }}>Edit</button>\r\n//                             <button onClick={() => handleDeleteReminder(reminder.id)} style={{ backgroundColor: \"#ff4d4d\", color: \"#fff\", border: \"none\", padding: \"0.4rem 0.8rem\", borderRadius: \"5px\", cursor: \"pointer\" }}>Delete</button>\r\n//                           </>\r\n//                         )}\r\n//                       </td>\r\n//                     </tr>\r\n//                   );\r\n//                 })}\r\n//               </tbody>\r\n//             </table>\r\n//           </div>\r\n//         </main>\r\n\r\n//         {/* Footer */}\r\n//         <div style={{ marginTop: \"auto\", textAlign: \"center\", padding: \"1rem\", backgroundColor: \"#3D5AFE\", color: \"#fff\", borderRadius: \"10px\" }}>\r\n//           © {new Date().getFullYear()} Tasky | Built with ❤️\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}